{"ast":null,"code":"import { SET_AUTH_DATA } from \"../types\";\nimport { authAPI } from \"../../API/authAPI\";\nconst initialState = {\n  email: null,\n  login: null,\n  id: null,\n  isAuth: false\n};\n\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_AUTH_DATA:\n      return { ...state,\n        ...action.payload,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthData = payload => ({\n  type: SET_AUTH_DATA,\n  payload\n});\nexport const setAuthDataThunk = () => {\n  return dispatch => {\n    authAPI.me().then(response => {\n      if (response.resultCode === 0) {\n        dispatch(setAuthData(response.data));\n      }\n\n      if (response.resultCode === 1) {\n        console.log(response.messages);\n      }\n    });\n  };\n};\nexport const logInThunk = (email, password) => {\n  return dispatch => {\n    authAPI.login(email, password).then(response => {\n      if (response.resultCode === 0) {\n        dispatch(setAuthDataThunk());\n      } else {\n        console.log(response.messages);\n      }\n    });\n  };\n};\nexport const logOutThunk = () => {\n  return dispatch => {\n    authAPI.logout().then(response => {\n      dispatch(setAuthDataThunk());\n      console.log(response);\n    });\n  };\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/elmir_mirzoiev/FrontEnd/social_network/src/store/Reducers/authReducer.js"],"names":["SET_AUTH_DATA","authAPI","initialState","email","login","id","isAuth","authReducer","state","action","type","payload","setAuthData","setAuthDataThunk","dispatch","me","then","response","resultCode","data","console","log","messages","logInThunk","password","logOutThunk","logout"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,UAA5B;AACA,SAAQC,OAAR,QAAsB,mBAAtB;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,IADU;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,EAAE,EAAE,IAHa;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;;AAOA,MAAMC,WAAW,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,aAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEH,WAAGC,MAAM,CAACE,OAFP;AAGHL,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAKJ;AACI,aAAOE,KAAP;AARR;AAUH,CAXD;;AAaA,OAAO,MAAMI,WAAW,GAAID,OAAD,KAAc;AAACD,EAAAA,IAAI,EAAEV,aAAP;AAAsBW,EAAAA;AAAtB,CAAd,CAApB;AAEP,OAAO,MAAME,gBAAgB,GAAG,MAAM;AAClC,SAAQC,QAAD,IAAc;AACjBb,IAAAA,OAAO,CAACc,EAAR,GAAaC,IAAb,CAAkBC,QAAQ,IAAI;AAC1B,UAAIA,QAAQ,CAACC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BJ,QAAAA,QAAQ,CAACF,WAAW,CAACK,QAAQ,CAACE,IAAV,CAAZ,CAAR;AAEH;;AACD,UAAIF,QAAQ,CAACC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BE,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACK,QAArB;AACH;AACJ,KARD;AASH,GAVD;AAWH,CAZM;AAcP,OAAO,MAAMC,UAAU,GAAG,CAACpB,KAAD,EAAQqB,QAAR,KAAqB;AAC3C,SAAOV,QAAQ,IAAI;AACfb,IAAAA,OAAO,CAACG,KAAR,CAAcD,KAAd,EAAqBqB,QAArB,EAA+BR,IAA/B,CAAoCC,QAAQ,IAAI;AAC5C,UAAIA,QAAQ,CAACC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BJ,QAAAA,QAAQ,CAACD,gBAAgB,EAAjB,CAAR;AACH,OAFD,MAEO;AACHO,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACK,QAArB;AACH;AACJ,KAND;AAOH,GARD;AASH,CAVM;AAYP,OAAO,MAAMG,WAAW,GAAG,MAAM;AAC7B,SAAOX,QAAQ,IAAI;AACfb,IAAAA,OAAO,CAACyB,MAAR,GAAiBV,IAAjB,CAAsBC,QAAQ,IAAI;AAC9BH,MAAAA,QAAQ,CAACD,gBAAgB,EAAjB,CAAR;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACH,KAHD;AAIH,GALD;AAMH,CAPM;AAUP,eAAeV,WAAf","sourcesContent":["import {SET_AUTH_DATA} from \"../types\";\nimport {authAPI} from \"../../API/authAPI\";\n\n\nconst initialState = {\n    email: null,\n    login: null,\n    id: null,\n    isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_AUTH_DATA:\n            return {\n                ...state,\n                ...action.payload,\n                isAuth: true\n            }\n        default:\n            return state\n    }\n};\n\nexport const setAuthData = (payload) => ({type: SET_AUTH_DATA, payload});\n\nexport const setAuthDataThunk = () => {\n    return (dispatch) => {\n        authAPI.me().then(response => {\n            if (response.resultCode === 0) {\n                dispatch(setAuthData(response.data))\n\n            }\n            if (response.resultCode === 1) {\n                console.log(response.messages)\n            }\n        })\n    }\n};\n\nexport const logInThunk = (email, password) => {\n    return dispatch => {\n        authAPI.login(email, password).then(response => {\n            if (response.resultCode === 0) {\n                dispatch(setAuthDataThunk())\n            } else {\n                console.log(response.messages)\n            }\n        })\n    }\n}\n\nexport const logOutThunk = () => {\n    return dispatch => {\n        authAPI.logout().then(response => {\n            dispatch(setAuthDataThunk())\n            console.log(response)\n        })\n    }\n}\n\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}