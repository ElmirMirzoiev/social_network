{"ast":null,"code":"import { UNFOLLOW_USER, // TOGGLE_FOLLOW_IN_PROGRESS,\nTOGGLE_IS_LOADING, SET_FRIENDS_DATA } from \"../types\";\nimport { usersAPI } from \"../../API/usersAPI\";\nconst initialState = {\n  friends: [],\n  error: null,\n  totalCount: null,\n  isLoading: false,\n  followInProgress: []\n};\n\nconst friendsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // case UNFOLLOW_USER:\n    //     return {\n    //         ...state,\n    //         users: state.users.map(users => {\n    //             if (users.id === action.id) {\n    //                 return {...users, followed: false}\n    //             }\n    //             return users;\n    //         })\n    //     }\n    case SET_FRIENDS_DATA:\n      return { ...state,\n        friends: action.friends,\n        totalCount: action.totalCount\n      };\n\n    case TOGGLE_IS_LOADING:\n      return { ...state,\n        isLoading: action.isLoading\n      };\n    // case TOGGLE_FOLLOW_IN_PROGRESS:\n    //     return {\n    //         ...state,\n    //         followInProgress: action.isFetching\n    //             ? [...state.followInProgress, action.userId]\n    //             : state.followInProgress.filter(id => id !== action.userId)\n    //     }\n\n    default:\n      return state;\n  }\n};\n\nexport const unfollow = userId => ({\n  type: UNFOLLOW_USER,\n  userId\n});\nexport const setFriendsData = (friends, totalCount) => ({\n  type: SET_FRIENDS_DATA,\n  friends,\n  totalCount\n});\nexport const toggleIsLoading = isLoading => ({\n  type: TOGGLE_IS_LOADING,\n  isLoading\n}); // export const toggleFollowInProgress = (isFetching, userId) => ({type: TOGGLE_FOLLOW_IN_PROGRESS, isFetching, userId})\n\nexport const setFriendsThunk = () => {\n  return dispatch => {\n    dispatch(toggleIsLoading(true));\n    usersAPI.getFriendsData().then(data => {\n      dispatch(setFriendsData(data.items, data.totalCount));\n      setTimeout(() => {\n        dispatch(toggleIsLoading(false));\n      }, 500);\n    });\n  };\n}; // export const unfollowUserThunk = (userId) => {\n//     return (dispatch) => {\n//         dispatch(toggleFollowInProgress(true, userId))\n//         UsersAPI.unfollowUser(userId).then(response => {\n//             if (response.data.resultCode === 0) {\n//                 dispatch(unfollow(userId))\n//             }\n//             dispatch(toggleFollowInProgress(false, userId))\n//         })\n//     }\n// };\n\nexport default friendsReducer;","map":{"version":3,"sources":["/Users/elmir_mirzoiev/FrontEnd/social_network/src/store/Reducers/friendsReducer.js"],"names":["UNFOLLOW_USER","TOGGLE_IS_LOADING","SET_FRIENDS_DATA","usersAPI","initialState","friends","error","totalCount","isLoading","followInProgress","friendsReducer","state","action","type","unfollow","userId","setFriendsData","toggleIsLoading","setFriendsThunk","dispatch","getFriendsData","then","data","items","setTimeout"],"mappings":"AAAA,SACCA,aADD,EAEC;AACAC,iBAHD,EAICC,gBAJD,QAKO,UALP;AAMA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,OAAO,EAAE,EADW;AAEpBC,EAAAA,KAAK,EAAE,IAFa;AAGpBC,EAAAA,UAAU,EAAE,IAHQ;AAIpBC,EAAAA,SAAS,EAAE,KAJS;AAKpBC,EAAAA,gBAAgB,EAAE;AALE,CAArB;;AAQA,MAAMC,cAAc,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBP,YAAyB;AAAA,MAAXQ,MAAW;;AACxD,UAAQA,MAAM,CAACC,IAAf;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAKX,gBAAL;AACC,aAAO,EACN,GAAGS,KADG;AAENN,QAAAA,OAAO,EAAEO,MAAM,CAACP,OAFV;AAGNE,QAAAA,UAAU,EAAEK,MAAM,CAACL;AAHb,OAAP;;AAKD,SAAKN,iBAAL;AACC,aAAO,EACN,GAAGU,KADG;AAENH,QAAAA,SAAS,EAAEI,MAAM,CAACJ;AAFZ,OAAP;AAID;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACC,aAAOG,KAAP;AA/BF;AAiCA,CAlCD;;AAoCA,OAAO,MAAMG,QAAQ,GAAIC,MAAD,KAAa;AAAEF,EAAAA,IAAI,EAAEb,aAAR;AAAuBe,EAAAA;AAAvB,CAAb,CAAjB;AACP,OAAO,MAAMC,cAAc,GAAG,CAACX,OAAD,EAAUE,UAAV,MAA0B;AACvDM,EAAAA,IAAI,EAAEX,gBADiD;AAEvDG,EAAAA,OAFuD;AAGvDE,EAAAA;AAHuD,CAA1B,CAAvB;AAKP,OAAO,MAAMU,eAAe,GAAIT,SAAD,KAAgB;AAC9CK,EAAAA,IAAI,EAAEZ,iBADwC;AAE9CO,EAAAA;AAF8C,CAAhB,CAAxB,C,CAIP;;AAEA,OAAO,MAAMU,eAAe,GAAG,MAAM;AACpC,SAAQC,QAAD,IAAc;AACpBA,IAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAd,IAAAA,QAAQ,CAACiB,cAAT,GAA0BC,IAA1B,CAAgCC,IAAD,IAAU;AACxCH,MAAAA,QAAQ,CAACH,cAAc,CAACM,IAAI,CAACC,KAAN,EAAaD,IAAI,CAACf,UAAlB,CAAf,CAAR;AACAiB,MAAAA,UAAU,CAAC,MAAM;AAChBL,QAAAA,QAAQ,CAACF,eAAe,CAAC,KAAD,CAAhB,CAAR;AACA,OAFS,EAEP,GAFO,CAAV;AAGA,KALD;AAMA,GARD;AASA,CAVM,C,CAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeP,cAAf","sourcesContent":["import {\n\tUNFOLLOW_USER,\n\t// TOGGLE_FOLLOW_IN_PROGRESS,\n\tTOGGLE_IS_LOADING,\n\tSET_FRIENDS_DATA,\n} from \"../types\"\nimport { usersAPI } from \"../../API/usersAPI\"\n\nconst initialState = {\n\tfriends: [],\n\terror: null,\n\ttotalCount: null,\n\tisLoading: false,\n\tfollowInProgress: [],\n}\n\nconst friendsReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\t// case UNFOLLOW_USER:\n\t\t//     return {\n\t\t//         ...state,\n\t\t//         users: state.users.map(users => {\n\t\t//             if (users.id === action.id) {\n\t\t//                 return {...users, followed: false}\n\t\t//             }\n\t\t//             return users;\n\t\t//         })\n\t\t//     }\n\n\t\tcase SET_FRIENDS_DATA:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tfriends: action.friends,\n\t\t\t\ttotalCount: action.totalCount,\n\t\t\t}\n\t\tcase TOGGLE_IS_LOADING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: action.isLoading,\n\t\t\t}\n\t\t// case TOGGLE_FOLLOW_IN_PROGRESS:\n\t\t//     return {\n\t\t//         ...state,\n\t\t//         followInProgress: action.isFetching\n\t\t//             ? [...state.followInProgress, action.userId]\n\t\t//             : state.followInProgress.filter(id => id !== action.userId)\n\t\t//     }\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const unfollow = (userId) => ({ type: UNFOLLOW_USER, userId })\nexport const setFriendsData = (friends, totalCount) => ({\n\ttype: SET_FRIENDS_DATA,\n\tfriends,\n\ttotalCount,\n})\nexport const toggleIsLoading = (isLoading) => ({\n\ttype: TOGGLE_IS_LOADING,\n\tisLoading,\n})\n// export const toggleFollowInProgress = (isFetching, userId) => ({type: TOGGLE_FOLLOW_IN_PROGRESS, isFetching, userId})\n\nexport const setFriendsThunk = () => {\n\treturn (dispatch) => {\n\t\tdispatch(toggleIsLoading(true))\n\t\tusersAPI.getFriendsData().then((data) => {\n\t\t\tdispatch(setFriendsData(data.items, data.totalCount))\n\t\t\tsetTimeout(() => {\n\t\t\t\tdispatch(toggleIsLoading(false))\n\t\t\t}, 500)\n\t\t})\n\t}\n}\n\n// export const unfollowUserThunk = (userId) => {\n//     return (dispatch) => {\n//         dispatch(toggleFollowInProgress(true, userId))\n//         UsersAPI.unfollowUser(userId).then(response => {\n//             if (response.data.resultCode === 0) {\n//                 dispatch(unfollow(userId))\n//             }\n//             dispatch(toggleFollowInProgress(false, userId))\n//         })\n//     }\n// };\n\nexport default friendsReducer\n"]},"metadata":{},"sourceType":"module"}