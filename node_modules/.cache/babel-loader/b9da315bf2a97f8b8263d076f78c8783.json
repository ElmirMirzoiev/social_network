{"ast":null,"code":"import { UNFOLLOW_USER, // TOGGLE_FOLLOW_IN_PROGRESS,\nTOGGLE_IS_LOADING, SET_FRIENDS_DATA } from '../types';\nimport { usersAPI } from \"../../API/usersAPI\";\nconst initialState = {\n  friends: [],\n  error: null,\n  totalCount: null,\n  isLoading: false,\n  followInProgress: []\n};\n\nconst friendsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // case UNFOLLOW_USER:\n    //     return {\n    //         ...state,\n    //         users: state.users.map(users => {\n    //             if (users.id === action.id) {\n    //                 return {...users, followed: false}\n    //             }\n    //             return users;\n    //         })\n    //     }\n    case SET_FRIENDS_DATA:\n      return { ...state,\n        friends: action.friends,\n        totalCount: action.totalCount\n      };\n\n    case TOGGLE_IS_LOADING:\n      return { ...state,\n        isLoading: action.isLoading\n      };\n    // case TOGGLE_FOLLOW_IN_PROGRESS:\n    //     return {\n    //         ...state,\n    //         followInProgress: action.isFetching\n    //             ? [...state.followInProgress, action.userId]\n    //             : state.followInProgress.filter(id => id !== action.userId)\n    //     }\n\n    default:\n      return state;\n  }\n};\n\nexport const unfollow = userId => ({\n  type: UNFOLLOW_USER,\n  userId\n});\nexport const setFriendsData = (friends, totalCount) => ({\n  type: SET_FRIENDS_DATA,\n  friends,\n  totalCount\n});\nexport const toggleIsLoading = isLoading => ({\n  type: TOGGLE_IS_LOADING,\n  isLoading\n}); // export const toggleFollowInProgress = (isFetching, userId) => ({type: TOGGLE_FOLLOW_IN_PROGRESS, isFetching, userId})\n\nexport const setFriendsThunk = () => {\n  return dispatch => {\n    dispatch(toggleIsLoading(true));\n    usersAPI.getFriendsData().then(data => {\n      dispatch(setFriendsData(data.items, data.totalCount));\n      setTimeout(() => {\n        dispatch(toggleIsLoading(false));\n      }, 500);\n    });\n  };\n}; // export const unfollowUserThunk = (userId) => {\n//     return (dispatch) => {\n//         dispatch(toggleFollowInProgress(true, userId))\n//         UsersAPI.unfollowUser(userId).then(response => {\n//             if (response.data.resultCode === 0) {\n//                 dispatch(unfollow(userId))\n//             }\n//             dispatch(toggleFollowInProgress(false, userId))\n//         })\n//     }\n// };\n\nexport default friendsReducer;","map":{"version":3,"sources":["/Users/elmir_mirzoiev/FrontEnd/social_network/src/store/Reducers/friendsReducer.js"],"names":["UNFOLLOW_USER","TOGGLE_IS_LOADING","SET_FRIENDS_DATA","usersAPI","initialState","friends","error","totalCount","isLoading","followInProgress","friendsReducer","state","action","type","unfollow","userId","setFriendsData","toggleIsLoading","setFriendsThunk","dispatch","getFriendsData","then","data","items","setTimeout"],"mappings":"AAAA,SACIA,aADJ,EAEI;AACAC,iBAHJ,EAIIC,gBAJJ,QAKO,UALP;AAMA,SAAQC,QAAR,QAAuB,oBAAvB;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,EADQ;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,UAAU,EAAE,IAHK;AAIjBC,EAAAA,SAAS,EAAE,KAJM;AAKjBC,EAAAA,gBAAgB,EAAE;AALD,CAArB;;AAQA,MAAMC,cAAc,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBP,YAAyB;AAAA,MAAXQ,MAAW;;AACrD,UAAQA,MAAM,CAACC,IAAf;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAKX,gBAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHN,QAAAA,OAAO,EAAEO,MAAM,CAACP,OAFb;AAGHE,QAAAA,UAAU,EAAEK,MAAM,CAACL;AAHhB,OAAP;;AAKJ,SAAKN,iBAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHH,QAAAA,SAAS,EAAEI,MAAM,CAACJ;AAFf,OAAP;AAIJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACI,aAAOG,KAAP;AAhCR;AAkCH,CAnCD;;AAqCA,OAAO,MAAMG,QAAQ,GAAIC,MAAD,KAAa;AAACF,EAAAA,IAAI,EAAEb,aAAP;AAAsBe,EAAAA;AAAtB,CAAb,CAAjB;AACP,OAAO,MAAMC,cAAc,GAAG,CAACX,OAAD,EAAUE,UAAV,MAA0B;AAACM,EAAAA,IAAI,EAAEX,gBAAP;AAAyBG,EAAAA,OAAzB;AAAkCE,EAAAA;AAAlC,CAA1B,CAAvB;AACP,OAAO,MAAMU,eAAe,GAAIT,SAAD,KAAgB;AAACK,EAAAA,IAAI,EAAEZ,iBAAP;AAA0BO,EAAAA;AAA1B,CAAhB,CAAxB,C,CACP;;AAEA,OAAO,MAAMU,eAAe,GAAG,MAAM;AACjC,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAd,IAAAA,QAAQ,CAACiB,cAAT,GAA0BC,IAA1B,CAA+BC,IAAI,IAAI;AACnCH,MAAAA,QAAQ,CAACH,cAAc,CAACM,IAAI,CAACC,KAAN,EAAaD,IAAI,CAACf,UAAlB,CAAf,CAAR;AACAiB,MAAAA,UAAU,CAAC,MAAM;AACbL,QAAAA,QAAQ,CAACF,eAAe,CAAC,KAAD,CAAhB,CAAR;AACH,OAFS,EAEP,GAFO,CAAV;AAGH,KALD;AAMH,GARD;AASH,CAVM,C,CAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAeP,cAAf","sourcesContent":["import {\n    UNFOLLOW_USER,\n    // TOGGLE_FOLLOW_IN_PROGRESS,\n    TOGGLE_IS_LOADING,\n    SET_FRIENDS_DATA,\n} from '../types';\nimport {usersAPI} from \"../../API/usersAPI\";\n\n\nconst initialState = {\n    friends: [],\n    error: null,\n    totalCount: null,\n    isLoading: false,\n    followInProgress: []\n};\n\nconst friendsReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        // case UNFOLLOW_USER:\n        //     return {\n        //         ...state,\n        //         users: state.users.map(users => {\n        //             if (users.id === action.id) {\n        //                 return {...users, followed: false}\n        //             }\n        //             return users;\n        //         })\n        //     }\n\n        case SET_FRIENDS_DATA:\n            return {\n                ...state,\n                friends: action.friends,\n                totalCount: action.totalCount\n            }\n        case TOGGLE_IS_LOADING:\n            return {\n                ...state,\n                isLoading: action.isLoading\n            }\n        // case TOGGLE_FOLLOW_IN_PROGRESS:\n        //     return {\n        //         ...state,\n        //         followInProgress: action.isFetching\n        //             ? [...state.followInProgress, action.userId]\n        //             : state.followInProgress.filter(id => id !== action.userId)\n        //     }\n        default:\n            return state;\n    }\n}\n\nexport const unfollow = (userId) => ({type: UNFOLLOW_USER, userId})\nexport const setFriendsData = (friends, totalCount) => ({type: SET_FRIENDS_DATA, friends, totalCount})\nexport const toggleIsLoading = (isLoading) => ({type: TOGGLE_IS_LOADING, isLoading})\n// export const toggleFollowInProgress = (isFetching, userId) => ({type: TOGGLE_FOLLOW_IN_PROGRESS, isFetching, userId})\n\nexport const setFriendsThunk = () => {\n    return (dispatch) => {\n        dispatch(toggleIsLoading(true))\n        usersAPI.getFriendsData().then(data => {\n            dispatch(setFriendsData(data.items, data.totalCount))\n            setTimeout(() => {\n                dispatch(toggleIsLoading(false))\n            }, 500)\n        })\n    }\n};\n\n\n// export const unfollowUserThunk = (userId) => {\n//     return (dispatch) => {\n//         dispatch(toggleFollowInProgress(true, userId))\n//         UsersAPI.unfollowUser(userId).then(response => {\n//             if (response.data.resultCode === 0) {\n//                 dispatch(unfollow(userId))\n//             }\n//             dispatch(toggleFollowInProgress(false, userId))\n//         })\n//     }\n// };\n\n\nexport default friendsReducer;\n"]},"metadata":{},"sourceType":"module"}