{"ast":null,"code":"var _jsxFileName = \"/Users/elmir_mirzoiev/FrontEnd/social_network/src/components/Pages/LoginPage/AuthForm/AuthForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport Button from \"@mui/material/Button\";\nimport { TextField } from \"@mui/material\";\nimport { useDispatch } from \"react-redux\";\nimport { logInThunk } from \"../../../../store/Reducers/authReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  email: yup.string('Enter your email').email('Enter a valid email').required('Email is required'),\n  password: yup.string('Enter your password').min(8, 'Password should be of minimum 8 characters length').required('Password is required')\n});\n\nconst AuthForm = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      dispatch(logInThunk(values.email, values.password));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formik.handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      fullWidth: true,\n      size: \"small\",\n      margin: \"normal\",\n      id: \"email\",\n      name: \"email\",\n      label: \"Email\",\n      value: formik.values.email,\n      onChange: formik.handleChange,\n      error: formik.touched.email && Boolean(formik.errors.email),\n      helperText: formik.touched.email && formik.errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      sx: {\n        marginBottom: 3\n      },\n      fullWidth: true,\n      size: \"small\",\n      margin: \"normal\",\n      id: \"password\",\n      name: \"password\",\n      label: \"Password\",\n      type: \"password\",\n      value: formik.values.password,\n      onChange: formik.handleChange,\n      error: formik.touched.password && Boolean(formik.errors.password),\n      helperText: formik.touched.password && formik.errors.password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      size: \"small\",\n      fullWidth: true,\n      type: \"submit\",\n      children: \"Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthForm, \"snIeeAJX6ddd+yTscBhJ9TqRTSM=\", false, function () {\n  return [useDispatch, useFormik];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["/Users/elmir_mirzoiev/FrontEnd/social_network/src/components/Pages/LoginPage/AuthForm/AuthForm.jsx"],"names":["React","useFormik","yup","Button","TextField","useDispatch","logInThunk","validationSchema","object","email","string","required","password","min","AuthForm","dispatch","formik","initialValues","onSubmit","values","handleSubmit","handleChange","touched","Boolean","errors","marginBottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useFormik} from 'formik';\nimport * as yup from 'yup';\nimport Button from \"@mui/material/Button\";\nimport {TextField} from \"@mui/material\";\nimport {useDispatch} from \"react-redux\";\nimport {logInThunk} from \"../../../../store/Reducers/authReducer\";\n\n\nconst validationSchema = yup.object({\n    email: yup\n        .string('Enter your email')\n        .email('Enter a valid email')\n        .required('Email is required'),\n    password: yup\n        .string('Enter your password')\n        .min(8, 'Password should be of minimum 8 characters length')\n        .required('Password is required'),\n});\n\nconst AuthForm = () => {\n\n    const dispatch = useDispatch();\n\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n        },\n        validationSchema: validationSchema,\n        onSubmit: (values) => {\n            dispatch(logInThunk(values.email, values.password))\n        },\n    });\n\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <TextField\n                fullWidth\n                size=\"small\"\n                margin=\"normal\"\n                id=\"email\"\n                name=\"email\"\n                label=\"Email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}\n            />\n            <TextField\n                sx={{marginBottom: 3}}\n                fullWidth\n                size=\"small\"\n                margin=\"normal\"\n                id=\"password\"\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                error={formik.touched.password && Boolean(formik.errors.password)}\n                helperText={formik.touched.password && formik.errors.password}\n            />\n            <Button\n                color=\"primary\"\n                variant=\"contained\"\n                size=\"small\"\n                fullWidth type=\"submit\">\n                Sign In\n            </Button>\n        </form>\n    );\n};\n\nexport default AuthForm;"]},"metadata":{},"sourceType":"module"}